document.addEventListener('DOMContentLoaded', () => {
    startNewColorGame();
});

let correctColor;
const colors = [
    { name: '—á–µ—Ä–≤–æ–Ω–∏–π', value: 'red' },
    { name: '—Å–∏–Ω—ñ–π', value: 'blue' },
    { name: '–∑–µ–ª–µ–Ω–∏–π', value: 'green' },
    { name: '–∂–æ–≤—Ç–∏–π', value: 'yellow' },
    { name: '—á–æ—Ä–Ω–∏–π', value: 'black' },
    { name: '–±—ñ–ª–∏–π', value: 'white' },
    { name: '–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π', value: 'orange' },
    { name: '—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π', value: 'purple' }
];

function startNewColorGame() {
    const randomIndex = Math.floor(Math.random() * colors.length);
    correctColor = colors[randomIndex];
    
    document.getElementById('colorSquare').style.backgroundColor = correctColor.value;
    document.getElementById('message').textContent = '';
    document.getElementById('retryButton').style.display = 'none';
    
    generateOptions();
}

function generateOptions() {
    const optionsContainer = document.getElementById('options');
    optionsContainer.innerHTML = '';

    let options = [correctColor];
    while (options.length < 4) {
        const randomOption = colors[Math.floor(Math.random() * colors.length)];
        if (!options.some(option => option.name === randomOption.name)) {
            options.push(randomOption);
        }
    }

    options = options.sort(() => Math.random() - 0.5);

    options.forEach(option => {
        const button = document.createElement('button');
        button.classList.add('game-button');
        button.textContent = option.name;
        button.onclick = () => checkColor(option);
        optionsContainer.appendChild(button);
    });
}

function checkColor(selectedOption) {
    const message = document.getElementById('message');
    if (selectedOption.name === correctColor.name) {
        message.textContent = '–í–∏ –≤–≥–∞–¥–∞–ª–∏! –ú–æ–ª–æ–¥–µ—Ü—å!';
        message.style.color = 'green';
    } else {
        message.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä: ${correctColor.name}`;
        message.style.color = 'red';
    }
    document.getElementById('retryButton').style.display = 'block';
}


//

let correctNumber;
let attempts = 0;

function startNewNumberGame() {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100
    correctNumber = Math.floor(Math.random() * 100) + 1;
    attempts = 0;
    
    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    document.getElementById('message').textContent = '';
    document.getElementById('retryButton').style.display = 'none';
}

function checkGuess() {
    const guess = parseInt(document.getElementById('guessInput').value);
    const message = document.getElementById('message');
    attempts++;

    if (isNaN(guess) || guess < 1 || guess > 100) {
        message.textContent = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100.';
        message.style.color = 'orange';
        return;
    }

    if (guess === correctNumber) {
        message.textContent = `–í—ñ—Ä–Ω–æ! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ ${attempts} —Å–ø—Ä–æ–±(–∏).`;
        message.style.color = 'green';
        document.getElementById('retryButton').style.display = 'block';
    } else if (guess < correctNumber) {
        message.textContent = '–°–ø—Ä–æ–±—É–π—Ç–µ –±—ñ–ª—å—à–µ —á–∏—Å–ª–æ.';
        message.style.color = 'orange';
    } else {
        message.textContent = '–°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à–µ —á–∏—Å–ª–æ.';
        message.style.color = 'orange';
    }
}

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', startNewNumberGame);


//

// –ú–∞—Å–∏–≤ –∑ 100 —Ä—ñ–∑–Ω–∏–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
const emojiList = [
    'üòÄ', 'üòÇ', 'üòç', 'ü•∫', 'üò¢', 'üòé', 'ü§î', 'üò°', 'ü§Ø', 'üò¥',
    'ü•≥', 'üòá', 'ü§ó', 'ü§©', 'üòà', 'üò∑', 'ü•¥', 'üòµ', 'üòµ‚Äçüí´', 'üò≥',
    'üò±', 'ü•∂', 'ü•µ', 'ü§§', 'üò¨', 'ü§Ø', 'üßê', 'ü§ì', 'üòã', 'ü§™',
    'üòù', 'üòú', 'ü§§', 'ü•∞', 'ü•≥', 'ü§†', 'üòà', 'üòá', 'ü§ó', 'ü§©',
    'üòÖ', 'üòÜ', 'üòà', 'ü§§', 'üòè', 'üò∂', 'üòë', 'üòå', 'üòÖ', 'üòÇ',
    'ü§£', 'üôÉ', 'ü§™', 'ü§©', 'üòè', 'üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü•∫',
    'üò∂', 'üòê', 'üòë', 'ü§§', 'üòì', 'üòî', 'üò•', 'üò∞', 'üò®', 'üò±',
    'ü•µ', 'ü•∂', 'üßä', 'üßÉ', 'üßâ', 'üßä', 'üßÉ', 'üßâ',
    'ü§ë', 'üò≤', 'ü§§', 'üò¨', 'üò¥', 'ü•±', 'üòß', 'üò∞', 'üò®', 'üò≥',
    'üòà', 'üòá', 'ü§©', 'ü•≥', 'üòª', 'üòΩ', 'ü•∫', 'üò¢', 'üò•', 'üò™',
    'ü§Ø', 'üòµ', 'üò†', 'ü§¨', 'ü§°', 'üòµ', 'üò∑', 'ü•µ', 'ü•∂', 'üßä',
    'üßã', 'üßÉ', 'üßâ', 'üçé', 'üçå', 'üçí', 'üçâ', 'üçá', 'üçì', 'üçã',
    'üçç', 'ü•≠', 'üçÜ', 'ü•ë', 'ü•í', 'üå∂', 'üåΩ', 'ü•ï', 'üç†', 'üçÖ',
    'ü•í', 'ü•ï', 'ü•î', 'üç†', 'ü••', 'ü•ù', 'üçè', 'üçé', 'üçê',
    'üçë', 'üçí', 'üçì', 'üçá', 'üçâ', 'üçà', 'üçä', 'üçã', 'üçå', 'üçç',
    'ü•≠', 'üçë', 'ü••', 'ü•ù', 'üçá', 'üçâ', 'üçà', 'üçè', 'üçé',
    'üçê', 'üçí', 'üçì', 'ü•≠', 'ü••', 'üßÑ', 'üßÖ', 'üßà', 'üßâ', 'üçØ',
    'üçø', 'üç©', 'üç™', 'üéÇ', 'üç∞', 'üßÅ', 'ü•ß', 'üç´', 'üç¨', 'üç≠'
];

// –í–∏–±—Ä–∞—Ç–∏ 40 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–º–∞–π–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –æ–¥–∏–Ω —Ü—ñ–ª—å–æ–≤–∏–π —Å–º–∞–π–ª–∏–∫
function startGame() {
    const emojiGrid = document.getElementById('emoji-grid');
    const message = document.getElementById('message');
    const targetEmojiElement = document.getElementById('target-emoji');

    // –í–∏–±—Ä–∞—Ç–∏ 40 —Å–º–∞–π–ª—ñ–≤
    const emojis = getRandomEmojis(40);

    // Randomly select the target emoji
    const targetIndex = Math.floor(Math.random() * 40);
    const targetEmoji = emojis[targetIndex];
    targetEmojiElement.textContent = targetEmoji;

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–º–∞–π–ª—ñ–≤ —É —Å—ñ—Ç—Ü—ñ
    emojiGrid.innerHTML = '';
    for (let i = 0; i < 40; i++) {
        const emoji = document.createElement('button');
        emoji.className = 'emoji-button';
        emoji.textContent = emojis[i];
        emoji.onclick = () => checkEmoji(emoji, targetEmoji);
        emojiGrid.appendChild(emoji);
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–º–∞–π–ª–∏–∫ —É –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
    emojiGrid.children[targetIndex].textContent = targetEmoji;

    message.textContent = '';
    message.className = 'message';
}

// –í–∏–±—Ä–∞—Ç–∏ 40 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–º–∞–π–ª—ñ–≤ –∑ –º–∞—Å–∏–≤—É
function getRandomEmojis(count) {
    const shuffled = emojiList.sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
}

function checkEmoji(button, targetEmoji) {
    const message = document.getElementById('message');

    if (button.textContent === targetEmoji) {
        message.textContent = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–º–∞–π–ª–∏–∫!';
        message.className = 'message correct';
    } else {
        message.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';
        message.className = 'message incorrect';
    }
}

// Start the game when the page loads
window.onload = startGame;